import urwid
from address_book.Addressbook import AddressBook
from address_book.models_book import Record
import shutil
import signal
import re
# urwid.get_terminal_size() –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ urwid.


class SmartPhoneEdit(urwid.Edit):
    def __init__(self, caption="", edit_text=""):
        super().__init__(caption=caption, edit_text=edit_text)
        self.raw_numbers = []  # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –ø–æ 10 —Ü–∏—Ñ—Ä

    def valid_char(self, ch):
        return ch.isdigit()

    def keypress(self, size, key):
        if key == 'backspace':
            if self.raw_numbers:
                last = self.raw_numbers[-1]
                if last:
                    self.raw_numbers[-1] = last[:-1]
                else:
                    self.raw_numbers.pop()
            self.update_text()
            return
        elif len(key) == 1 and self.valid_char(key):
            if not self.raw_numbers:
                self.raw_numbers.append("")
            if len(self.raw_numbers[-1]) >= 10:
                if len(self.raw_numbers) < 100:  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤
                    self.raw_numbers.append(key)
                else:
                    return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–∏—à–Ω–µ–µ
            else:
                self.raw_numbers[-1] += key
            self.update_text()
            return
        else:
            return key  # –ø–µ—Ä–µ–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def update_text(self):
        formatted = ', '.join(self.raw_numbers)
        self.set_edit_text(formatted)
        self.set_edit_pos(len(formatted))

    def get_phone_numbers(self):
        return self.raw_numbers


class ContactBookApp:
    def __init__(self, book: AddressBook):
        self.book = book
        self.overlay_open = False  # —Ñ–ª–∞–≥ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–∫–Ω–∞ overlay
        self.COLUMN_WEIGHTS = [7, 10, 10, 10, 10]
        self.column_wdth = []
        self.HEADERS = ["Name", "Phone", "Email",
                        "Address", "Birthday"]

        self.palette = [
            ('header', 'white', 'dark blue'),
            ('footer', 'black', 'light gray'),
            ('selected', 'black', 'light cyan'),
            ('default', 'white', 'black'),
            ('button_green', 'black', 'dark green'),
            ('button_green_focus', 'white', 'dark green', 'bold'),
            ('button_red', 'white', 'dark red'),
            ('button_red_focus', 'black', 'dark red', 'bold'),
        ]
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
        self.handle_resize(self)
        # —Å–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Ñ—É—Ç–µ—Ä–∞:
        self.menu_txt = '[‚Üë/‚Üì] Move  [Enter] Select  [A]dd  [E]dit  [D]elete [Q]uit'
        self.menu = urwid.Text(self.menu_txt, align='center')
        self.footer = urwid.AttrMap(self.menu, 'footer')

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        self.header_row = self.create_table_row(
            self.HEADERS, is_header=True)
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
        self.walker = urwid.SimpleFocusListWalker(self.build_contact_list())
        self.listbox = urwid.ListBox(self.walker)

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞
        urwid.connect_signal(self.walker, 'modified',
                             lambda: self.on_focus_changed())
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.list_area = urwid.Pile([
            ('pack', self.header_row),
            self.listbox
        ])

        # –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥, –æ–±—ë—Ä–Ω—É—Ç—ã–π –≤ —Ä–∞–º–∫—É
        self.view = urwid.Frame(
            # header=self.header,
            body=self.create_mc_linebox(
                self.list_area, title=" üìí –ê–¥—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞ "),
            footer=self.footer
        )

        # –°–≤—è–∂–µ–º —Å–∏–≥–Ω–∞–ª SIGWINCH (resize —Ç–µ—Ä–º–∏–Ω–∞–ª–∞) —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        signal.signal(signal.SIGWINCH, self.handle_resize)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–≤–µ—Ä–ª–µ—è
        self.overlay = None

    # –≤—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–æ–ø—à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–∫–∏
    def handle_resize(self, *args):
        self.terminal_width = shutil.get_terminal_size().columns
        # –≤—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª—é—Ü–æ–≤
        self.column_wdth = []
        koef = self.terminal_width/sum(self.COLUMN_WEIGHTS)
        for weight in self.COLUMN_WEIGHTS:
            self.column_wdth.append(int(weight*koef))
        if hasattr(self, 'loop') and self.loop is not None:
            self.update_footer()
            self.refresh_list()

    def on_focus_changed(self):
        """–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞ - –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        _, pos = self.walker.get_focus()
        if pos:
            self.book.selected_index = pos
        else:
            self.book.selected_index = 0
        self.update_footer()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ñ—É—Ç–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:

    def update_footer(self):
        if not self.book.data:
            contact_info = "No contact selected"
        else:
            selected_contact = self.book.get_record_by_index(
                self.book.selected_index)
            contact_info = f"Selected: {selected_contact.get_name()}" if selected_contact else "No contact selected"
        # self.menu.set_text(f"{self.menu_txt} | {contact_info}")
        self.menu.set_text(
            f"{self.menu_txt} | {self.column_wdth} | {self.terminal_width}")

    def create_mc_linebox(self, widget, title=""):
        """–∑–∞–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–∂–µ—Ç–∞-—Ä–∞–º–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        return urwid.LineBox(
            widget,
            title=title,
            tlcorner='‚îå', tline='‚îÄ', lline='‚îÇ',
            trcorner='‚îê', rline='‚îÇ',
            blcorner='‚îî', bline='‚îÄ', brcorner='‚îò'
        )

    def create_table_row(self, columns, is_header=False):
        """–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º"""
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        # –°–æ–∑–¥–∞—ë–º Text-–≤–∏–¥–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ–ª–æ–Ω–∫–∏
        # text_widget = urwid.Columns(
        #     [(weight, urwid.Text(f"‚îÇ{col.ljust(weight)}"))
        #      for weight, col in zip(self.COLUMN_WEIGHTS, columns)],
        #     dividechars=1
        # )
        text_widget = urwid.Columns(
            [urwid.Text(col.ljust(self.COLUMN_WEIGHTS[i])) for i, col in enumerate(columns)], dividechars=1)
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ AttrMap:
        # - –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å 'header' "‚îÇ"+
        # - –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å 'default'
        if is_header:
            text_widget._selectable = False
            return urwid.AttrMap(text_widget, 'header')
        else:
            text_widget._selectable = True
            return urwid.AttrMap(text_widget, None, focus_map='selected')

    def build_contact_list(self):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≥–ª–∞–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        [
        [Name1, Phones1, email1, address1, birthday1],
        [Name2, Phones2, email2, address2, birthday2],
        ...,
        ]"""
        rows = []

        def cutting_text(text_to_cut, wdths):
            result = []
            for txt, wdth in zip(text_to_cut, wdths):
                if len(txt) >= wdth:
                    txt = txt[0:wdth-1]+'‚Ä¶'
                result.append(txt)
            return result

        for key in self.book.data:
            record = self.book.data[key]
            row_data = [
                record.get_name(),
                record.get_phones(),
                record.get_email(),
                record.get_address(),
                record.get_birthday(),
            ]
            row_data = cutting_text(row_data, self.column_wdth)
            row = self.create_table_row(row_data)
            rows.append(row)
        return rows

    def refresh_list(self):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        current_focus = self.book.selected_index
        # –û—á–∏—â–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        self.walker.clear()
        self.walker.extend(self.build_contact_list())
        if 0 <= current_focus < len(self.walker):
            self.walker.set_focus(current_focus)
        else:
            self.walker.set_focus(0)

    def handle_input(self, key):
        if key in ('q', 'Q'):
            raise urwid.ExitMainLoop()
        elif key in ('down',):
            pass
        elif key in ('up',):
            pass
        elif key == 'a':
            self.add_contact()
        elif key == 'd':
            if not self.book.data:
                return  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –∞–¥—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞ –ø—É—Å—Ç–∞
            self.book.remove_record_by_index(self.book.selected_index)
            # –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ—Ä–µ—à –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏.
            self.refresh_list()
        elif key == 'enter':
            if not self.book.data:
                return  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –∞–¥—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞ –ø—É—Å—Ç–∞
            self.edit_contact(self.book.selected_index)
        elif key in ('h', 'H'):
            self.show_help()
        self.refresh_list()

    def create_contact_form(self, record=None):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
        # –ü–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_name = urwid.Edit("Name: ", record.get_name() if record else "")
        edit_phone = SmartPhoneEdit(
            "Phone: ", record.get_phones() if record else "")
        # urwid.Edit("Phone: ", record.get_phones() if record else "")
        edit_email = urwid.Edit(
            "E-Mail: ", record.get_email() if record else "")
        edit_address = urwid.Edit(
            "Address: ", record.get_address() if record else "")
        edit_birthday = urwid.Edit(
            "Birthday: ", record.get_birthday() if record else "")

        # –ö–Ω–æ–ø–∫–∏
        s_button = urwid.Button("üíæ Save", align='center')
        cancel_button = urwid.Button(
            "‚ùå Cancel", self.close_popup, align='center')
        # –¶–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫
        save_button = urwid.AttrMap(
            s_button, 'button_green', focus_map='button_green_focus')
        cancel_button = urwid.AttrMap(
            cancel_button, 'button_red', focus_map='button_red_focus')
        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã
        pile = urwid.Pile([
            urwid.Divider(),
            edit_name,
            edit_phone,
            edit_email,
            edit_address,
            edit_birthday,
            urwid.Divider(),
            urwid.Columns([save_button, cancel_button],
                          dividechars=2, min_width=10),
            urwid.Divider()
        ])

        # –†–∞–º–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        if record:
            boxtitle = record.get_name()
        else:
            boxtitle = 'New record'
        title = f" ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî {boxtitle} "
        boxed = urwid.LineBox(
            pile,
            title=title,
            tlcorner='‚ï≠', tline='‚îÄ', lline='‚îÇ',
            trcorner='‚ïÆ', rline='‚îÇ',
            blcorner='‚ï∞', bline='‚îÄ', brcorner='‚ïØ',
            title_align='center')  # –ü–æ–ø—Ä–æ–±—É–π –≤—ã—Ä–æ–≤–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É

        overlay = urwid.Overlay(
            boxed,
            self.view,
            align='center', width=(50),
            valign='middle', height=(11)
        )

        return overlay, s_button, (edit_name, edit_phone, edit_email, edit_address, edit_birthday)

    def add_contact(self):
        if not hasattr(self, 'loop'):
            raise RuntimeError(
                "Application loop is not initialized. Call run() first.")
        overlay, save_button, data = self.create_contact_form()
        urwid.connect_signal(save_button, 'click',
                             self.save_contact, data + (-1,))
        self.show_overlay(overlay)

    def edit_contact(self, index):
        if not hasattr(self, 'loop'):
            raise RuntimeError(
                "Application loop is not initialized. Call run() first.")
        record = self.book.get_record_by_index(index)
        if not record:
            return
        form, save_button, data = self.create_contact_form(record)
        urwid.connect_signal(save_button, 'click',
                             self.save_contact, data + (index,))
        self.show_overlay(form)

    def show_overlay(self, overlay):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥–∂–µ—Ç (–æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å) –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ–≤–µ—Ä–ª–µ—è
        self.previous_widget = self.loop.widget
        self.loop.widget = overlay
        self.overlay_open = True

    def close_popup(self, button=None):
        if hasattr(self, 'previous_widget'):
            self.loop.widget = self.previous_widget
        self.overlay_open = False
        self.refresh_list()
        # –û—á–∏—Å—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        if button:
            urwid.disconnect_signal(button, 'click', self.save_contact)

    def save_contact(self, button, data):
        edit_name, edit_phone, edit_email, edit_address, edit_birthday, index = data
        new_rec = Record(
            edit_name.edit_text,
            edit_phone.edit_text,
            edit_birthday.edit_text,
            edit_email.edit_text,
            edit_address.edit_text,
        )
        if index >= 0:
            self.book.update_record_by_index(index, new_rec)
        else:
            self.book.add_record(new_rec)
        self.close_popup()

    def show_error(self, message):
        error_text = urwid.Text(
            ('button_red', f"\n‚ö†Ô∏è  {message}\n"), align='center')
        ok_button = urwid.Button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", self.close_popup)
        ok_button = urwid.AttrMap(
            ok_button, 'button_red', focus_map='button_red_focus')

        pile = urwid.Pile([
            error_text,
            urwid.Divider(),
            urwid.Padding(ok_button, align='center', width=12),
            urwid.Divider()
        ])

        box = urwid.LineBox(
            pile,
            title=" –û—à–∏–±–∫–∞ ",
            title_align='center',
            tlcorner='‚ï≠', tline='‚îÄ', lline='‚îÇ',
            trcorner='‚ïÆ', rline='‚îÇ',
            blcorner='‚ï∞', bline='‚îÄ', brcorner='‚ïØ'
        )

        overlay = urwid.Overlay(
            box, self.view,
            align='center', width=('relative', 50),
            valign='middle', height=('relative', 30)
        )
        self.show_overlay(overlay)

    def show_error1(self, message):
        error_text = urwid.Text(f"Error: {message}")
        overlay = urwid.Overlay(
            urwid.LineBox(error_text),
            self.view,
            'center', 40, 'middle', 10
        )
        self.loop.widget = overlay

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
        help_text = urwid.Text("""
        –ö–ª–∞–≤–∏—à–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        ‚Üë / ‚Üì       –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫—É—Ä—Å–æ—Ä
        Enter       –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        A           –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        E           –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        D           –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        Q           –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        """, align='left')
        ok_button = urwid.Button("OK", self.close_popup)
        ok_button = urwid.AttrMap(
            ok_button, 'button_green', focus_map='button_green_focus')
        pile = urwid.Pile([
            help_text,
            urwid.Divider(),
            urwid.Padding(ok_button, align='center', width=10)
        ])
        box = urwid.LineBox(pile, title="üìò –°–ø—Ä–∞–≤–∫–∞",
                            tlcorner='‚ï≠', tline='‚îÄ', lline='‚îÇ',
                            trcorner='‚ïÆ', rline='‚îÇ',
                            blcorner='‚ï∞', bline='‚îÄ', brcorner='‚ïØ',
                            title_align='center')
        overlay = urwid.Overlay(
            box, self.view, align='center', width=60, valign='middle', height=16)
        self.show_overlay(overlay)

    def run(self):
        self.loop = urwid.MainLoop(
            self.view, self.palette, unhandled_input=self.handle_input)
        self.loop.run()
